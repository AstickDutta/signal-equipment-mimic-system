name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  REGISTRY: docker.io
  IMAGE_NAME: signal-equipment-api

jobs:
  test-and-format:
    name: Test & Code Quality
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_signal_equipment
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install coverage pytest-cov

      - name: Code formatting check with Black
        run: |
          echo "Checking code formatting with Black..."
          black --check --diff --color .

      - name: Code formatting (auto-fix on PR)
        if: github.event_name == 'pull_request'
        run: |
          echo "Auto-formatting code with Black..."
          black .
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add -A
          git diff --staged --quiet || git commit -m "Auto-format code with Black [skip ci]"

      - name: Run linting with flake8
        run: |
          echo "Running linting checks..."
          pip install flake8
          flake8 app/ tests/ --max-line-length=88 --extend-ignore=E203,W503

      - name: Run unit tests with coverage
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_signal_equipment
        run: |
          echo "Running unit tests with coverage..."
          pytest tests/ -v --tb=short --cov=app --cov-report=xml --cov-report=html --cov-report=term-missing

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

      - name: Archive coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: htmlcov/

  # Security Scanning Job
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test-and-format
    permissions:
      actions: read
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload Trivy scan results as artifact
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: trivy-security-scan
          path: trivy-results.sarif

      - name: Run Bandit security linter
        run: |
          pip install bandit
          bandit -r app/ -f json -o bandit-report.json || true

      - name: Upload Bandit results
        uses: actions/upload-artifact@v4
        with:
          name: bandit-report
          path: bandit-report.json
          
  build-and-push:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: [test-and-format, security-scan]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: Build Docker image (PR)
        if: github.event_name == 'pull_request'
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Docker image (Main/Develop)
        if: github.event_name != 'pull_request'
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Docker container test
        if: github.event_name != 'pull_request'
        run: |
          echo "Testing Docker container..."
          docker run --rm -d --name test-container -p 8080:8000 \
            -e DATABASE_URL=sqlite:///./test.db \
            ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest
          
          echo "Waiting for container to start..."
          sleep 15
          
          echo "Checking container status..."
          docker ps | grep test-container || (echo "Container not running" && exit 1)
          
          echo "Container logs:"
          docker logs test-container
          
          echo "Testing health endpoint..."
          for i in {1..5}; do
            if curl -f http://localhost:8080/health; then
              echo "Health check passed!"
              break
            else
              echo "‚è≥ Attempt $i failed, retrying in 3 seconds..."
              sleep 3
            fi
            if [ $i -eq 5 ]; then
              echo "Health check failed after 5 attempts"
              docker logs test-container
              exit 1
            fi
          done
          
          echo "Testing main endpoint..."
          curl -f http://localhost:8080/ || (echo "Main endpoint failed" && docker logs test-container && exit 1)
          
          docker stop test-container
          echo "Docker container test passed!"

  # Deployment Job (optional)
  deploy:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: staging

    steps:
      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          echo "Image: ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:main"
          # Add your deployment commands here